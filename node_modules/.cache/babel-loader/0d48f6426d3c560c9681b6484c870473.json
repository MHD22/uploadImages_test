{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('Imgix', ['exports', 'md5', 'js-base64'], factory);\n  } else if (typeof exports !== 'undefined') {\n    module.exports = factory(exports, require('md5'), require('js-base64').Base64);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    global.ImgixClient = factory(mod.exports, global.md5, global.Base64);\n  }\n})(this, function (exports, _md5, _jsBase64) {\n  var md5 = _md5;\n  var Base64 = _jsBase64.Base64 || _jsBase64; // package version used in the ix-lib parameter\n\n  var VERSION = '2.3.1'; // regex pattern used to determine if a domain is valid\n\n  var DOMAIN_REGEX = /^(?:[a-z\\d\\-_]{1,62}\\.){0,125}(?:[a-z\\d](?:\\-(?=\\-*[a-z\\d])|[a-z]|\\d){0,62}\\.)[a-z\\d]{1,63}$/i; // minimum generated srcset width\n\n  var MIN_SRCSET_WIDTH = 100; // maximum generated srcset width\n\n  var MAX_SRCSET_WIDTH = 8192; // default tolerable percent difference between srcset pair widths\n\n  var DEFAULT_SRCSET_WIDTH_TOLERANCE = .08; // default quality parameter values mapped by each dpr srcset entry\n\n  var DPR_QUALITIES = {\n    1: 75,\n    2: 50,\n    3: 35,\n    4: 23,\n    5: 20\n  }; // default ImgixClient settings passed in during instantiation\n\n  var DEFAULTS = {\n    domain: null,\n    useHTTPS: true,\n    includeLibraryParam: true\n  };\n\n  var ImgixClient = function () {\n    function ImgixClient(opts) {\n      var key, val;\n      this.settings = {};\n\n      for (key in DEFAULTS) {\n        val = DEFAULTS[key];\n        this.settings[key] = val;\n      }\n\n      for (key in opts) {\n        val = opts[key];\n        this.settings[key] = val;\n      }\n\n      if (typeof this.settings.domain != \"string\") {\n        throw new Error('ImgixClient must be passed a valid string domain');\n      }\n\n      if (DOMAIN_REGEX.exec(this.settings.domain) == null) {\n        throw new Error('Domain must be passed in as fully-qualified ' + 'domain name and should not include a protocol or any path ' + 'element, i.e. \"example.imgix.net\".');\n      }\n\n      if (this.settings.includeLibraryParam) {\n        this.settings.libraryParam = \"js-\" + VERSION;\n      }\n\n      this.settings.urlPrefix = this.settings.useHTTPS ? 'https://' : 'http://';\n    }\n\n    ;\n\n    ImgixClient.prototype.buildURL = function (path, params) {\n      path = this._sanitizePath(path);\n\n      if (params == null) {\n        params = {};\n      }\n\n      var queryParams = this._buildParams(params);\n\n      if (!!this.settings.secureURLToken) {\n        queryParams = this._signParams(path, queryParams);\n      }\n\n      return this.settings.urlPrefix + this.settings.domain + path + queryParams;\n    };\n\n    ImgixClient.prototype._sanitizePath = function (path) {\n      // Strip leading slash first (we'll re-add after encoding)\n      path = path.replace(/^\\//, '');\n\n      if (/^https?:\\/\\//.test(path)) {\n        // Use de/encodeURIComponent to ensure *all* characters are handled,\n        // since it's being used as a path\n        path = encodeURIComponent(path);\n      } else {\n        // Use de/encodeURI if we think the path is just a path,\n        // so it leaves legal characters like '/' and '@' alone\n        path = encodeURI(path).replace(/[#?:]/g, encodeURIComponent);\n      }\n\n      return '/' + path;\n    };\n\n    ImgixClient.prototype._buildParams = function (params) {\n      if (this.settings.libraryParam) {\n        params.ixlib = this.settings.libraryParam;\n      }\n\n      var queryParams = [];\n      var key, val, encodedKey, encodedVal;\n\n      for (key in params) {\n        val = params[key];\n        encodedKey = encodeURIComponent(key);\n        encodedVal;\n\n        if (key.substr(-2) === '64') {\n          encodedVal = Base64.encodeURI(val);\n        } else {\n          encodedVal = encodeURIComponent(val);\n        }\n\n        queryParams.push(encodedKey + \"=\" + encodedVal);\n      }\n\n      if (queryParams[0]) {\n        queryParams[0] = \"?\" + queryParams[0];\n      }\n\n      return queryParams.join('&');\n    };\n\n    ImgixClient.prototype._signParams = function (path, queryParams) {\n      var signatureBase = this.settings.secureURLToken + path + queryParams;\n      var signature = md5(signatureBase);\n\n      if (queryParams.length > 0) {\n        return queryParams = queryParams + \"&s=\" + signature;\n      } else {\n        return queryParams = \"?s=\" + signature;\n      }\n    };\n\n    ImgixClient.prototype.buildSrcSet = function (path, params, options) {\n      var params = params || {};\n      var width = params.w;\n      var height = params.h;\n      var aspectRatio = params.ar;\n      var options = options || {};\n\n      if (width || height && aspectRatio) {\n        return this._buildDPRSrcSet(path, params, options);\n      } else {\n        return this._buildSrcSetPairs(path, params, options);\n      }\n    };\n\n    ImgixClient.prototype._buildSrcSetPairs = function (path, params, options) {\n      var srcset = '';\n      var currentWidth;\n      var targetWidths;\n      var customWidths = options.widths;\n      var srcsetOptions = validateAndDestructureOptions(options);\n      var widthTolerance = srcsetOptions[0],\n          minWidth = srcsetOptions[1],\n          maxWidth = srcsetOptions[2];\n\n      if (customWidths) {\n        validateWidths(customWidths);\n        targetWidths = customWidths;\n      } else {\n        validateRange(minWidth, maxWidth);\n        validateWidthTolerance(widthTolerance);\n        targetWidths = this._generateTargetWidths(widthTolerance, minWidth, maxWidth);\n      }\n\n      for (var i = 0; i < targetWidths.length; i++) {\n        currentWidth = targetWidths[i];\n        params.w = currentWidth;\n        srcset += this.buildURL(path, params) + ' ' + currentWidth + 'w,\\n';\n      }\n\n      return srcset.slice(0, -2);\n    };\n\n    ImgixClient.prototype._buildDPRSrcSet = function (path, params, options) {\n      var srcset = '';\n      var targetRatios = [1, 2, 3, 4, 5];\n      var currentRatio;\n      var disableVariableQuality = options.disableVariableQuality || false;\n      var quality = params.q;\n\n      if (!disableVariableQuality) {\n        validateVariableQuality(disableVariableQuality);\n      }\n\n      for (var i = 0; i < targetRatios.length; i++) {\n        currentRatio = targetRatios[i];\n        params.dpr = currentRatio;\n\n        if (!disableVariableQuality) {\n          params.q = quality || DPR_QUALITIES[currentRatio];\n        }\n\n        srcset += this.buildURL(path, params) + ' ' + currentRatio + 'x,\\n';\n      }\n\n      return srcset.slice(0, -2);\n    }; // a cache to store memoized srcset width-pairs\n\n\n    ImgixClient.prototype.targetWidthsCache = {}; // returns an array of width values used during scrset generation\n\n    ImgixClient.prototype._generateTargetWidths = function (widthTolerance, minWidth, maxWidth) {\n      var resolutions = [];\n      var INCREMENT_PERCENTAGE = widthTolerance;\n      var minWidth = Math.floor(minWidth);\n      var maxWidth = Math.floor(maxWidth);\n      var cacheKey = INCREMENT_PERCENTAGE + '/' + minWidth + '/' + maxWidth;\n\n      if (cacheKey in this.targetWidthsCache) {\n        return this.targetWidthsCache[cacheKey];\n      }\n\n      var ensureEven = function (n) {\n        return 2 * Math.round(n / 2);\n      };\n\n      var prev = minWidth;\n\n      while (prev < maxWidth) {\n        resolutions.push(ensureEven(prev));\n        prev *= 1 + INCREMENT_PERCENTAGE * 2;\n      }\n\n      resolutions.push(maxWidth);\n      this.targetWidthsCache[cacheKey] = resolutions;\n      return resolutions;\n    };\n\n    function validateAndDestructureOptions(options) {\n      if (options.widthTolerance !== undefined) {\n        validateWidthTolerance(options.widthTolerance);\n        var widthTolerance = options.widthTolerance;\n      } else {\n        var widthTolerance = DEFAULT_SRCSET_WIDTH_TOLERANCE;\n      }\n\n      var minWidth = options.minWidth === undefined ? MIN_SRCSET_WIDTH : options.minWidth;\n      var maxWidth = options.maxWidth === undefined ? MAX_SRCSET_WIDTH : options.maxWidth; // Validate the range unless we're using defaults for both\n\n      if (minWidth != MIN_SRCSET_WIDTH || maxWidth != MAX_SRCSET_WIDTH) {\n        validateRange(minWidth, maxWidth);\n      }\n\n      return [widthTolerance, minWidth, maxWidth];\n    }\n\n    ;\n\n    function validateRange(min, max) {\n      if (!(Number.isInteger(min) && Number.isInteger(max)) || min <= 0 || max <= 0 || min > max) {\n        throw new Error('The min and max srcset widths can only be passed positive Number values');\n      }\n    }\n\n    ;\n\n    function validateWidthTolerance(widthTolerance) {\n      if (typeof widthTolerance != 'number' || widthTolerance <= 0) {\n        throw new Error('The srcset widthTolerance argument can only be passed a positive scalar number');\n      }\n    }\n\n    ;\n\n    function validateWidths(customWidths) {\n      if (!Array.isArray(customWidths) || !customWidths.length) {\n        throw new Error('The widths argument can only be passed a valid non-empty array of integers');\n      } else {\n        var allPositiveIntegers = customWidths.every(function (width) {\n          return Number.isInteger(width) && width > 0;\n        });\n\n        if (!allPositiveIntegers) {\n          throw new Error('A custom widths argument can only contain positive integer values');\n        }\n      }\n    }\n\n    ;\n\n    function validateVariableQuality(disableVariableQuality) {\n      if (typeof disableVariableQuality != 'boolean') {\n        throw new Error('The disableVariableQuality argument can only be passed a Boolean value');\n      }\n    }\n\n    ;\n    ImgixClient.VERSION = VERSION;\n    return ImgixClient;\n  }();\n\n  return ImgixClient;\n});","map":{"version":3,"sources":["/Users/mhd.sad22/Desktop/imgix/test_imgix/node_modules/imgix-core-js/dist/imgix-core-js.js"],"names":["global","factory","define","amd","exports","module","require","Base64","mod","ImgixClient","md5","_md5","_jsBase64","VERSION","DOMAIN_REGEX","MIN_SRCSET_WIDTH","MAX_SRCSET_WIDTH","DEFAULT_SRCSET_WIDTH_TOLERANCE","DPR_QUALITIES","DEFAULTS","domain","useHTTPS","includeLibraryParam","opts","key","val","settings","Error","exec","libraryParam","urlPrefix","prototype","buildURL","path","params","_sanitizePath","queryParams","_buildParams","secureURLToken","_signParams","replace","test","encodeURIComponent","encodeURI","ixlib","encodedKey","encodedVal","substr","push","join","signatureBase","signature","length","buildSrcSet","options","width","w","height","h","aspectRatio","ar","_buildDPRSrcSet","_buildSrcSetPairs","srcset","currentWidth","targetWidths","customWidths","widths","srcsetOptions","validateAndDestructureOptions","widthTolerance","minWidth","maxWidth","validateWidths","validateRange","validateWidthTolerance","_generateTargetWidths","i","slice","targetRatios","currentRatio","disableVariableQuality","quality","q","validateVariableQuality","dpr","targetWidthsCache","resolutions","INCREMENT_PERCENTAGE","Math","floor","cacheKey","ensureEven","n","round","prev","undefined","min","max","Number","isInteger","Array","isArray","allPositiveIntegers","every"],"mappings":"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","sourcesContent":["(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define('Imgix', ['exports', 'md5', 'js-base64'], factory);\n  } else if (typeof exports !== 'undefined') {\n    module.exports = factory(exports, require('md5'), require('js-base64').Base64);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    global.ImgixClient = factory(mod.exports, global.md5, global.Base64);\n  }\n})(this, function (exports, _md5, _jsBase64) {\n  var md5 = _md5;\n  var Base64 = _jsBase64.Base64 || _jsBase64;\n\n  // package version used in the ix-lib parameter\n  var VERSION = '2.3.1';\n  // regex pattern used to determine if a domain is valid\n  var DOMAIN_REGEX = /^(?:[a-z\\d\\-_]{1,62}\\.){0,125}(?:[a-z\\d](?:\\-(?=\\-*[a-z\\d])|[a-z]|\\d){0,62}\\.)[a-z\\d]{1,63}$/i;\n  // minimum generated srcset width\n  var MIN_SRCSET_WIDTH = 100;\n  // maximum generated srcset width\n  var MAX_SRCSET_WIDTH = 8192;\n  // default tolerable percent difference between srcset pair widths\n  var DEFAULT_SRCSET_WIDTH_TOLERANCE = .08;\n\n  // default quality parameter values mapped by each dpr srcset entry\n  var DPR_QUALITIES = {\n    1: 75,\n    2: 50,\n    3: 35,\n    4: 23,\n    5: 20\n  };\n\n  // default ImgixClient settings passed in during instantiation\n  var DEFAULTS = {\n    domain: null,\n    useHTTPS: true,\n    includeLibraryParam: true\n  };\n\n  var ImgixClient = (function() {\n    function ImgixClient(opts) {\n      var key, val;\n\n      this.settings = {};\n\n      for (key in DEFAULTS) {\n        val = DEFAULTS[key];\n        this.settings[key] = val;\n      }\n\n      for (key in opts) {\n        val = opts[key];\n        this.settings[key] = val;\n      }\n\n      if (typeof this.settings.domain != \"string\") {\n        throw new Error('ImgixClient must be passed a valid string domain');\n      }\n\n      if (DOMAIN_REGEX.exec(this.settings.domain) == null) {\n        throw new Error(\n          'Domain must be passed in as fully-qualified ' + \n          'domain name and should not include a protocol or any path ' + \n          'element, i.e. \"example.imgix.net\".');\n      }\n\n      if (this.settings.includeLibraryParam) {\n        this.settings.libraryParam = \"js-\" + VERSION;\n      }\n\n      this.settings.urlPrefix = this.settings.useHTTPS ? 'https://' : 'http://'\n    };\n\n    ImgixClient.prototype.buildURL = function(path, params) {\n      path = this._sanitizePath(path);\n\n      if (params == null) {\n        params = {};\n      }\n\n      var queryParams = this._buildParams(params);\n      if (!!this.settings.secureURLToken) {\n        queryParams = this._signParams(path, queryParams);\n      }\n\n      return this.settings.urlPrefix + this.settings.domain + path + queryParams;\n    };\n\n    ImgixClient.prototype._sanitizePath = function(path) {\n      // Strip leading slash first (we'll re-add after encoding)\n      path = path.replace(/^\\//, '');\n\n      if (/^https?:\\/\\//.test(path)) {\n        // Use de/encodeURIComponent to ensure *all* characters are handled,\n        // since it's being used as a path\n        path = encodeURIComponent(path);\n      } else {\n        // Use de/encodeURI if we think the path is just a path,\n        // so it leaves legal characters like '/' and '@' alone\n        path = encodeURI(path).replace(/[#?:]/g, encodeURIComponent);\n      }\n\n      return '/' + path;\n    };\n\n    ImgixClient.prototype._buildParams = function(params) {\n      if (this.settings.libraryParam) {\n        params.ixlib = this.settings.libraryParam\n      }\n\n      var queryParams = [];\n      var key, val, encodedKey, encodedVal;\n      for (key in params) {\n        val = params[key];\n        encodedKey = encodeURIComponent(key);\n        encodedVal;\n\n        if (key.substr(-2) === '64') {\n          encodedVal = Base64.encodeURI(val);\n        } else {\n          encodedVal = encodeURIComponent(val);\n        }\n        queryParams.push(encodedKey + \"=\" + encodedVal);\n      }\n\n      if (queryParams[0]) {\n        queryParams[0] = \"?\" + queryParams[0];\n      }\n      return queryParams.join('&');\n    };\n\n    ImgixClient.prototype._signParams = function(path, queryParams) {\n      var signatureBase = this.settings.secureURLToken + path + queryParams;\n      var signature = md5(signatureBase);\n\n      if (queryParams.length > 0) {\n        return queryParams = queryParams + \"&s=\" + signature;\n      } else {\n        return queryParams = \"?s=\" + signature;\n      }\n    };\n\n    ImgixClient.prototype.buildSrcSet = function (path, params, options) {\n      var params = params || {};\n      var width = params.w;\n      var height = params.h;\n      var aspectRatio = params.ar;\n      var options = options || {};\n\n      if ((width) || (height && aspectRatio)) {\n        return this._buildDPRSrcSet(path, params, options);\n      } else {\n        return this._buildSrcSetPairs(path, params, options);\n      }\n    };\n\n    ImgixClient.prototype._buildSrcSetPairs = function(path, params, options) {\n      var srcset = '';\n      var currentWidth;\n      var targetWidths;\n      var customWidths = options.widths;\n      var srcsetOptions = validateAndDestructureOptions(options);\n      var widthTolerance = srcsetOptions[0], minWidth = srcsetOptions[1], maxWidth = srcsetOptions[2];\n\n      if (customWidths) {\n        validateWidths(customWidths);\n        targetWidths = customWidths;\n      } else {\n        validateRange(minWidth, maxWidth);\n        validateWidthTolerance(widthTolerance);\n        targetWidths = this._generateTargetWidths(widthTolerance, minWidth, maxWidth);\n      }\n\n      for (var i = 0; i < targetWidths.length; i++) {\n        currentWidth = targetWidths[i];\n        params.w = currentWidth;\n        srcset += this.buildURL(path, params) + ' ' + currentWidth + 'w,\\n';\n      }\n\n      return srcset.slice(0,-2);\n    };\n\n    ImgixClient.prototype._buildDPRSrcSet = function(path, params, options) {\n        var srcset = '';\n        var targetRatios = [1, 2, 3, 4, 5];\n        var currentRatio;\n        var disableVariableQuality = options.disableVariableQuality || false;\n        var quality = params.q;\n\n        if (!disableVariableQuality) {\n          validateVariableQuality(disableVariableQuality);\n        }\n\n        for (var i = 0; i < targetRatios.length; i++) {\n          currentRatio = targetRatios[i];\n          params.dpr = currentRatio;\n\n          if (!disableVariableQuality) {\n            params.q = quality || DPR_QUALITIES[currentRatio];\n          }\n\n          srcset += this.buildURL(path, params) + ' ' + currentRatio + 'x,\\n'\n        }\n\n        return srcset.slice(0,-2);\n    };\n\n    // a cache to store memoized srcset width-pairs\n    ImgixClient.prototype.targetWidthsCache = {};\n\n    // returns an array of width values used during scrset generation\n    ImgixClient.prototype._generateTargetWidths = function(widthTolerance, minWidth, maxWidth) {\n      var resolutions = [];\n      var INCREMENT_PERCENTAGE = widthTolerance;\n      var minWidth = Math.floor(minWidth);\n      var maxWidth = Math.floor(maxWidth);\n      var cacheKey = INCREMENT_PERCENTAGE + '/' + minWidth + '/' + maxWidth;\n\n      if (cacheKey in this.targetWidthsCache) {\n        return this.targetWidthsCache[cacheKey];\n      }\n\n      var ensureEven = function(n){\n        return 2 * Math.round(n / 2);\n      };\n\n      var prev = minWidth;\n      while (prev < maxWidth) {\n        resolutions.push(ensureEven(prev));\n        prev *= 1 + (INCREMENT_PERCENTAGE * 2);\n      }\n\n      resolutions.push(maxWidth);\n\n      this.targetWidthsCache[cacheKey] = resolutions;\n\n      return resolutions;\n    };\n\n    function validateAndDestructureOptions(options) {\n      if (options.widthTolerance !== undefined) {\n        validateWidthTolerance(options.widthTolerance);\n        var widthTolerance = options.widthTolerance;\n      } else {\n        var widthTolerance = DEFAULT_SRCSET_WIDTH_TOLERANCE;\n      }\n\n      var minWidth = options.minWidth === undefined ? MIN_SRCSET_WIDTH : options.minWidth;\n      var maxWidth = options.maxWidth === undefined ? MAX_SRCSET_WIDTH : options.maxWidth;\n\n      // Validate the range unless we're using defaults for both\n      if (minWidth != MIN_SRCSET_WIDTH || maxWidth != MAX_SRCSET_WIDTH) {\n        validateRange(minWidth, maxWidth);\n      }\n\n      return [widthTolerance, minWidth, maxWidth];\n    };\n\n    function validateRange(min, max) {\n      if (!(Number.isInteger(min) && Number.isInteger(max)) || (min <= 0 || max <= 0) || (min > max)) {\n          throw new Error('The min and max srcset widths can only be passed positive Number values');\n      }\n    };\n\n    function validateWidthTolerance(widthTolerance) {\n      if (typeof widthTolerance != 'number' || widthTolerance <= 0) {\n        throw new Error('The srcset widthTolerance argument can only be passed a positive scalar number');\n      }\n    };\n\n    function validateWidths(customWidths) {\n      if (!Array.isArray(customWidths) || !customWidths.length) {\n        throw new Error('The widths argument can only be passed a valid non-empty array of integers');\n      } else {\n        var allPositiveIntegers = customWidths.every(\n          function(width) {\n            return Number.isInteger(width) && width > 0\n          }\n        );\n        if (!allPositiveIntegers) {\n          throw new Error('A custom widths argument can only contain positive integer values');\n        }\n      }\n    };\n\n    function validateVariableQuality(disableVariableQuality) {\n      if (typeof disableVariableQuality != 'boolean') {\n        throw new Error('The disableVariableQuality argument can only be passed a Boolean value');\n      }\n    };\n\n    ImgixClient.VERSION = VERSION;\n\n    return ImgixClient;\n  })();\n\n  return ImgixClient;\n});\n"]},"metadata":{},"sourceType":"script"}